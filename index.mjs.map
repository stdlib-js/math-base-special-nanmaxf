{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport maxf from '@stdlib/math-base-special-maxf';\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\n\n\n// MAIN //\n\n/**\n* Returns the maximum value of two single-precision floating-point numbers, ignoring NaN.\n*\n* @param {number} x - first number\n* @param {number} y - second number\n* @returns {number} maximum value\n*\n* @example\n* var v = nanmaxf( 3.14, 4.2 );\n* // returns 4.2\n*\n* @example\n* var v = nanmaxf( 4.14, NaN );\n* // returns 4.14\n*\n* @example\n* var v = nanmaxf( NaN, NaN );\n* // returns NaN\n*/\nfunction nanmaxf( x, y ) {\n\tif ( isnanf( x ) ) {\n\t\treturn ( isnanf( y ) ) ? NaN : y;\n\t}\n\treturn ( isnanf( y ) ) ? x : maxf( x, y );\n}\n\n\n// EXPORTS //\n\nexport default nanmaxf;\n"],"names":["nanmaxf","x","y","isnanf","NaN","maxf"],"mappings":";;6LA+CA,SAASA,EAASC,EAAGC,GACpB,OAAKC,EAAQF,GACHE,EAAQD,GAAQE,IAAMF,EAEvBC,EAAQD,GAAQD,EAAII,EAAMJ,EAAGC,EACvC"}